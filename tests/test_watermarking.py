import numpy as np

from tests import IMATestCase


class TestWatermark(IMATestCase):

    def test_watermark(self):
        self.seed_everything()
        rgb = np.array(
            [[[215, 111, 160],
              [169, 202, 248],
              [ 89,  18,  36],
              [ 14,  73,  15]],
             [[211, 212, 108],
              [215,  79, 238],
              [133, 120, 202],
              [ 98,  99, 159]],
             [[ 92, 176, 255],
              [159,  90,  92],
              [144,  27, 164],
              [126, 141,  18]]],
            dtype = np.uint8
        )
        watermark = np.array(
            [[[220, 158,  14],
              [138, 188, 136],
              [ 43, 101, 244]],
             [[ 81, 156, 167],
              [ 89, 182,  17],
              [245, 198, 129]]],
            dtype = np.uint8
        )
        mask = np.array(
            [[ 66,   1],
             [167, 116]],
            dtype = np.uint8
        )
        expected_x = np.array(
           [[[0.89589158, 0.48045546, 0.64119067],
             [0.70612191, 0.84142378, 0.99701919],
             [0.36543145, 0.09460397, 0.16461041],
             [0.06734385, 0.30507579, 0.0903716 ]],
            [[0.88946216, 0.89960078, 0.46125686],
             [0.89728412, 0.38398353, 0.9680851 ],
             [0.55957922, 0.5228219,  0.82798075],
             [0.42696393, 0.43506875, 0.67608632]],
            [[0.41968849, 0.78124925, 1.        ],
             [0.68043765, 0.45159796, 0.40417239],
             [0.62897503, 0.18970294, 0.67921751],
             [0.58459568, 0.63649394, 0.13222693]]]
        )
        x = self.params['watermark_fn'](rgb, watermark, mask, alpha=0.271)
        self.assertIn(x.dtype, (float, np.float32))
        self.assertArraysClose(x, expected_x)
